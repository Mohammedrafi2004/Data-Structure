class num
{
class Node {
    int data;
    Node prev;
    Node next;
    Node(int d) {
        data = d;
        prev = null;
        next = null;
    }
}
    Node head;
    public void insertAtEnd(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
            return;
        }
        Node temp = head;
        while (temp.next != null) {
            temp = temp.next;
        }
        temp.next = newNode;
        newNode.prev = temp;
    }
    public void insertAtBeginning(int data)
    {
        Node newNode=new Node(data);
        if(head==null)
        {
            head=newNode;
            return;
        }
        newNode.next=head;
        head.prev=newNode;
        head=newNode;
    }
    public void insertAtMiddle(int data, int pos)
    {
        if(pos == 0) {
            insertAtBeginning(data);
            return;
        }
        Node newNode= new Node(data);
        Node temp =head;
        for(int i = 0; i<pos-1 &&temp!= null;i++) 
        {
            temp =temp.next;
        }
        if (temp==null|| temp.next== null)
        {
            insertAtEnd(data);
            return;
        }
        newNode.next= temp.next;
        newNode.prev = temp;temp.next.prev=newNode;
        temp.next=newNode;
    }
    public void deleteAtEnd(int data)
    {
        if(head==null)
        {
            System.out.print("head is nullso we can't delete");
        }
        else if(head.next==null)
        {
            head=null;
        }
        else
        {
            Node temp=head;
            while(temp.next.next!=null)
            {
                temp=temp.next;
            }
            temp.next=null;
        }
    }
    public void deleteAtBeginning(int data)
    {
        if(head==null)
        {
            System.out.print("head is null can't delete");
        }
        else{
            head=head.next;
            head.prev=null;
        }
    }
        public void deleteAtMiddle(int pos){
        if(head==null){
            System.out.println("head is null, cannot delete");
        }
        else{
            Node temp=head;
            pos-=2;
            while(pos>0)
            {
                pos--;
                temp=temp.next;
            }
            temp.next=temp.next.next;
            temp.next.prev=temp;
        }
    }
    void display() {
        Node temp = head;
        while (temp != null) {
            System.out.print(temp.data + " ");
            temp = temp.next;
        }
        System.out.println();
    }
}
    class Main {
    public static void main(String[] args) {
        num list = new num();
        list.insertAtEnd(1);
        list.display();  
        list.insertAtEnd(2);
        list.display();  
        list.insertAtBeginning(3);
        list.display();
        list.insertAtEnd(5);
        list.display();  
        list.insertAtBeginning(4);
        list.display();
        list.insertAtMiddle(6,2);
        list.display();
        list.deleteAtMiddle(4);
        list.display();
        list.deleteAtEnd(5);
        list.display();
        list.deleteAtBeginning(4);
        list.display();
        list.deleteAtEnd(3);
        list.display();
        list.deleteAtEnd(7);
        list.display();
        
    }
} 


output :
1
1 2
3 1 2
3 1 2 5
4 3 1 2 5
4 3 6 1 2 5
4 3 6 2 5
4 3 6 2
3 6 2
3 6
3
